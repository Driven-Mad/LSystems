#ifndef TURTLE_H
#define TURTLE_H // TURTLE_H
#include <iostream>
#include <ngl/Transformation.h>
#include <ngl/Mat3.h>
//--------------------------------------------------------------------------------------------------------------------------
/// @file turtle.h
/// @brief This is the turtle class to manipulate a "turtle" to create geometric shapes.
/// @author Lloyd Phillips
/// @version 0.3
/// @date 24/01/17
/// Revision History:
/// Currently in working progress, most is working accept pop on & off, only simple commands have been
/// issued none have been overloaded to allow for the overriding of global variables.
/// @class Turtle
/// @brief The class that manipulates itself to move like a turtle using commands.
//--------------------------------------------------------------------------------------------------------------------------

class Turtle
{
public:
//--------------------------------------------------------------------------------------------------------------------------
/// FUNCTIONALITY
//--------------------------------------------------------------------------------------------------------------------------

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor for turtle class
    //----------------------------------------------------------------------------------------------------------------------
    Turtle();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor for turtle class
    //----------------------------------------------------------------------------------------------------------------------
    ~Turtle();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Moves forward by one full length and sets draw flag to true.
    //----------------------------------------------------------------------------------------------------------------------
    void moveForwardFullStep();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Moves forward by one half length and sets draw flag to true.
    //----------------------------------------------------------------------------------------------------------------------
    void moveForwardHalfStep();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Moves forward by one full length and sets draw flag to false.
    //----------------------------------------------------------------------------------------------------------------------
    void moveForwardFullStepUndrawn();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Moves forward by one half length and sets draw flag to false.
    //----------------------------------------------------------------------------------------------------------------------
    void moveForwardHalfStepUndrawn();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Yaws Left by the standard angle.
    //----------------------------------------------------------------------------------------------------------------------
    void yawLeft();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Yaws Right by the standard angle.
    //----------------------------------------------------------------------------------------------------------------------
    void yawRight();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Pitches Up by the standard angle.
    //----------------------------------------------------------------------------------------------------------------------
    void pitchUp();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Pitches Down by the standard angle.
    //----------------------------------------------------------------------------------------------------------------------
    void pitchDown();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Rolls clockwise by the standard angle.
    //----------------------------------------------------------------------------------------------------------------------
    void rollCW();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Rolls counter clockwise by the standard angle.
    //----------------------------------------------------------------------------------------------------------------------
    void rollCCW();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Turns around 180 degrees
    //----------------------------------------------------------------------------------------------------------------------
    void turnAround();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Starts a new branch
    //----------------------------------------------------------------------------------------------------------------------
    void startBranch();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ends the branch
    //----------------------------------------------------------------------------------------------------------------------
    void endBranch();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Toggle the drawing flag on and off.
    //----------------------------------------------------------------------------------------------------------------------
    void toggleDrawing(){draw = !draw;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Update function to update postion.
    //----------------------------------------------------------------------------------------------------------------------
    void update();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Resets the transformation matrix.
    //----------------------------------------------------------------------------------------------------------------------
    void resetTransformation(){m_transformation.reset();}

    void init();
    void init(float angle, float length);

//--------------------------------------------------------------------------------------------------------------------------
/// SETTERS
//--------------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the position
    /// @param p_pos - The position you wish to set turtles position (m_position) to. (Vec4)
    //----------------------------------------------------------------------------------------------------------------------
    void setPosition(ngl::Vec4 const& p_pos){m_position = p_pos;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the rotation
    /// @param p_rot - The rotation you wish to set turtles rotation (m_rotation) to. (Vec4)
    //----------------------------------------------------------------------------------------------------------------------
    void setRotation(ngl::Vec4 const& p_rot){m_rotation = p_rot;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Stores the current position of the turtle into a seperate variable
    //----------------------------------------------------------------------------------------------------------------------
    void storePosition(){m_storedStackPosition = m_transformation.getPosition();}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Stores the current rotation of the turtle into a seperate variable
    //----------------------------------------------------------------------------------------------------------------------
    void storeRotation(){m_storedStackRotation = m_transformation.getRotation();}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the standard unit and half unit.
    /// @param p_sUnit - The standard unit you wish to set turtles standard unit
    ///         (m_standardUnit) & half unit (m_halfUnit)  to. (float)
    //----------------------------------------------------------------------------------------------------------------------
    void setStandardUnit(float const& p_sUnit){m_standardUnit = p_sUnit;m_halfUnit = p_sUnit/2.0f;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Sets the standard angle.
    /// @param p_sAngle - The standard angle you wish to set turtles standard angle (m_standardAngle) to. (float)
    //----------------------------------------------------------------------------------------------------------------------
    void setStandardAngle(float const& p_sAngle){m_standardAngle = p_sAngle;}

//--------------------------------------------------------------------------------------------------------------------------
/// GETTERS
//--------------------------------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Gets the position.
    /// @return Returns the current position (m_position) of the turtle. (Vec4)
    //----------------------------------------------------------------------------------------------------------------------
    const ngl::Vec4 &getPosition() const {return m_position;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Gets the rotation.
    /// @return Returns the current rotation (m_rotation) of the turtle. (Vec4)
    //----------------------------------------------------------------------------------------------------------------------
    const ngl::Vec4 &getRotation() const {return m_rotation;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief restores position before poping off.
    //----------------------------------------------------------------------------------------------------------------------
    void restorePosition() {m_transformation.setPosition(m_storedStackPosition); m_position = m_storedStackPosition;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief restores rotation before poping off.
    //----------------------------------------------------------------------------------------------------------------------
    void restoreRotation() {m_transformation.setRotation( m_storedStackRotation);m_rotation = m_storedStackRotation;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Gets the standard unit of this turtle.
    /// @return Returns the current standard unit (m_standardUnit) of the turtle. (float)
    //----------------------------------------------------------------------------------------------------------------------
    const float &getStandardUnit() const {return m_standardUnit;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Gets the standard angle of this turtle.
    /// @return Returns the current standard angle (m_standardAngle) of the turtle. (float)
    //----------------------------------------------------------------------------------------------------------------------
    const float &getAngle()const {return m_standardAngle;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Gets the drawing flag of this turtle.
    /// @return Returns the drawing flag (draw) of the turtle. Drawing ? True : False (bool)
    //----------------------------------------------------------------------------------------------------------------------
    const bool &getDrawing()const {return draw;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Gets the drawing flag of this turtle.
    /// @return Returns the drawing flag (draw) of the turtle. Drawing ? True : False (bool)
    //----------------------------------------------------------------------------------------------------------------------

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Turtle transformation;
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Transformation m_transformation;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Turtle Current Position
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec4 m_position;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Turtle Current Rotation
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec4 m_rotation;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Turtles Stored Position before it is pushed off the stack.
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec4 m_storedStackPosition;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Turtles Stored Rotation before it is pushed off the stack.
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec4 m_storedStackRotation;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The standard unit lenght of movement
    //----------------------------------------------------------------------------------------------------------------------
    float m_standardUnit;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The half unit value of standard unit
    //----------------------------------------------------------------------------------------------------------------------
    float m_halfUnit;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The Standard Angle to rotate by.
    //----------------------------------------------------------------------------------------------------------------------
    float m_standardAngle;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief draw flag to see if the turtle is being drawn Drawing ? True : False
    //----------------------------------------------------------------------------------------------------------------------
    bool draw = false;

    //UNUSED
    ngl::Mat3 rotationX;
    ngl::Mat3 rotationY;
    ngl::Mat3 rotationZ;


};

#endif // !TURTLE_H
